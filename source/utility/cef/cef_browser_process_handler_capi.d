/* Converted to D from ../include/capi/cef_browser_process_handler_capi.h by htod */
module cef_browser_process_handler_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_BROWSER_PROCESS_HANDLER_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_BROWSER_PROCESS_HANDLER_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;
//C     #include "include/capi/cef_command_line_capi.h"
import cef_command_line_capi;
//C     #include "include/capi/cef_values_capi.h"
import cef_values_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Structure used to implement browser process callbacks. The functions of this
// structure will be called on the browser process main thread unless otherwise
// indicated.
///
//C     typedef struct _cef_browser_process_handler_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Called on the browser process UI thread immediately after the CEF context
  // has been initialized.
  ///
//C       void (CEF_CALLBACK *on_context_initialized)(
//C           struct _cef_browser_process_handler_t* self);

  ///
  // Called before a child process is launched. Will be called on the browser
  // process UI thread when launching a render process and on the browser
  // process IO thread when launching a GPU or plugin process. Provides an
  // opportunity to modify the child process command line. Do not keep a
  // reference to |command_line| outside of this function.
  ///
//C       void (CEF_CALLBACK *on_before_child_process_launch)(
//C           struct _cef_browser_process_handler_t* self,
//C           struct _cef_command_line_t* command_line);

  ///
  // Called on the browser process IO thread after the main thread has been
  // created for a new render process. Provides an opportunity to specify extra
  // information that will be passed to
  // cef_render_process_handler_t::on_render_thread_created() in the render
  // process. Do not keep a reference to |extra_info| outside of this function.
  ///
//C       void (CEF_CALLBACK *on_render_process_thread_created)(
//C           struct _cef_browser_process_handler_t* self,
//C           struct _cef_list_value_t* extra_info);
//C     } cef_browser_process_handler_t;
struct _cef_browser_process_handler_t
{
    cef_base_t base;
    void  function(_cef_browser_process_handler_t *self)on_context_initialized;
    void  function(_cef_browser_process_handler_t *self, _cef_command_line_t *command_line)on_before_child_process_launch;
    void  function(_cef_browser_process_handler_t *self, _cef_list_value_t *extra_info)on_render_process_thread_created;
}
extern (C):
alias _cef_browser_process_handler_t cef_browser_process_handler_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_BROWSER_PROCESS_HANDLER_CAPI_H_

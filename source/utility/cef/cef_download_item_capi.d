/* Converted to D from ../include/capi/cef_download_item_capi.h by htod */
module cef_download_item_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_DOWNLOAD_ITEM_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_DOWNLOAD_ITEM_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Structure used to represent a download item.
///
//C     typedef struct _cef_download_item_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if this object is valid. Do not call any other functions
  // if this function returns false (0).
  ///
//C       int (CEF_CALLBACK *is_valid)(struct _cef_download_item_t* self);

  ///
  // Returns true (1) if the download is in progress.
  ///
//C       int (CEF_CALLBACK *is_in_progress)(struct _cef_download_item_t* self);

  ///
  // Returns true (1) if the download is complete.
  ///
//C       int (CEF_CALLBACK *is_complete)(struct _cef_download_item_t* self);

  ///
  // Returns true (1) if the download has been canceled or interrupted.
  ///
//C       int (CEF_CALLBACK *is_canceled)(struct _cef_download_item_t* self);

  ///
  // Returns a simple speed estimate in bytes/s.
  ///
//C       int64 (CEF_CALLBACK *get_current_speed)(struct _cef_download_item_t* self);

  ///
  // Returns the rough percent complete or -1 if the receive total size is
  // unknown.
  ///
//C       int (CEF_CALLBACK *get_percent_complete)(struct _cef_download_item_t* self);

  ///
  // Returns the total number of bytes.
  ///
//C       int64 (CEF_CALLBACK *get_total_bytes)(struct _cef_download_item_t* self);

  ///
  // Returns the number of received bytes.
  ///
//C       int64 (CEF_CALLBACK *get_received_bytes)(struct _cef_download_item_t* self);

  ///
  // Returns the time that the download started.
  ///
//C       cef_time_t (CEF_CALLBACK *get_start_time)(struct _cef_download_item_t* self);

  ///
  // Returns the time that the download ended.
  ///
//C       cef_time_t (CEF_CALLBACK *get_end_time)(struct _cef_download_item_t* self);

  ///
  // Returns the full path to the downloaded or downloading file.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_full_path)(
//C           struct _cef_download_item_t* self);

  ///
  // Returns the unique identifier for this download.
  ///
//C       uint32 (CEF_CALLBACK *get_id)(struct _cef_download_item_t* self);

  ///
  // Returns the URL.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_url)(
//C           struct _cef_download_item_t* self);

  ///
  // Returns the suggested file name.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_suggested_file_name)(
//C           struct _cef_download_item_t* self);

  ///
  // Returns the content disposition.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_content_disposition)(
//C           struct _cef_download_item_t* self);

  ///
  // Returns the mime type.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_mime_type)(
//C           struct _cef_download_item_t* self);
//C     } cef_download_item_t;
struct _cef_download_item_t
{
    cef_base_t base;
    int  function(_cef_download_item_t *self)is_valid;
    int  function(_cef_download_item_t *self)is_in_progress;
    int  function(_cef_download_item_t *self)is_complete;
    int  function(_cef_download_item_t *self)is_canceled;
    int64  function(_cef_download_item_t *self)get_current_speed;
    int  function(_cef_download_item_t *self)get_percent_complete;
    int64  function(_cef_download_item_t *self)get_total_bytes;
    int64  function(_cef_download_item_t *self)get_received_bytes;
    cef_time_t  function(_cef_download_item_t *self)get_start_time;
    cef_time_t  function(_cef_download_item_t *self)get_end_time;
    cef_string_userfree_t  function(_cef_download_item_t *self)get_full_path;
    uint32  function(_cef_download_item_t *self)get_id;
    cef_string_userfree_t  function(_cef_download_item_t *self)get_url;
    cef_string_userfree_t  function(_cef_download_item_t *self)get_suggested_file_name;
    cef_string_userfree_t  function(_cef_download_item_t *self)get_content_disposition;
    cef_string_userfree_t  function(_cef_download_item_t *self)get_mime_type;
}
extern (C):
alias _cef_download_item_t cef_download_item_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_DOWNLOAD_ITEM_CAPI_H_

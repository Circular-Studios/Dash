/* Converted to D from ../include/capi/cef_drag_data_capi.h by htod */
module cef_drag_data_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_DRAG_DATA_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_DRAG_DATA_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Structure used to represent drag data. The functions of this structure may be
// called on any thread.
///
//C     typedef struct _cef_drag_data_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if the drag data is a link.
  ///
//C       int (CEF_CALLBACK *is_link)(struct _cef_drag_data_t* self);

  ///
  // Returns true (1) if the drag data is a text or html fragment.
  ///
//C       int (CEF_CALLBACK *is_fragment)(struct _cef_drag_data_t* self);

  ///
  // Returns true (1) if the drag data is a file.
  ///
//C       int (CEF_CALLBACK *is_file)(struct _cef_drag_data_t* self);

  ///
  // Return the link URL that is being dragged.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_link_url)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the title associated with the link being dragged.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_link_title)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the metadata, if any, associated with the link being dragged.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_link_metadata)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the plain text fragment that is being dragged.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_fragment_text)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the text/html fragment that is being dragged.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_fragment_html)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the base URL that the fragment came from. This value is used for
  // resolving relative URLs and may be NULL.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_fragment_base_url)(
//C           struct _cef_drag_data_t* self);

  ///
  // Return the name of the file being dragged out of the browser window.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_file_name)(
//C           struct _cef_drag_data_t* self);

  ///
  // Retrieve the list of file names that are being dragged into the browser
  // window.
  ///
//C       int (CEF_CALLBACK *get_file_names)(struct _cef_drag_data_t* self,
//C           cef_string_list_t names);
//C     } cef_drag_data_t;
struct _cef_drag_data_t
{
    cef_base_t base;
    int  function(_cef_drag_data_t *self)is_link;
    int  function(_cef_drag_data_t *self)is_fragment;
    int  function(_cef_drag_data_t *self)is_file;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_link_url;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_link_title;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_link_metadata;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_fragment_text;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_fragment_html;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_fragment_base_url;
    cef_string_userfree_t  function(_cef_drag_data_t *self)get_file_name;
    int  function(_cef_drag_data_t *self, cef_string_list_t names)get_file_names;
}
extern (C):
alias _cef_drag_data_t cef_drag_data_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_DRAG_DATA_CAPI_H_

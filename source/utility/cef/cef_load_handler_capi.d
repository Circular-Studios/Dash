/* Converted to D from ../include/capi/cef_load_handler_capi.h by htod */
module cef_load_handler_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_LOAD_HANDLER_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_LOAD_HANDLER_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;
//C     #include "include/capi/cef_browser_capi.h"
import cef_browser_capi;
//C     #include "include/capi/cef_frame_capi.h"

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Implement this structure to handle events related to browser load status. The
// functions of this structure will be called on the browser process UI thread
// or render process main thread (TID_RENDERER).
///
//C     typedef struct _cef_load_handler_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Called when the loading state has changed. This callback will be executed
  // twice -- once when loading is initiated either programmatically or by user
  // action, and once when loading is terminated due to completion, cancellation
  // of failure.
  ///
//C       void (CEF_CALLBACK *on_loading_state_change)(struct _cef_load_handler_t* self,
//C           struct _cef_browser_t* browser, int isLoading, int canGoBack,
//C           int canGoForward);

  ///
  // Called when the browser begins loading a frame. The |frame| value will
  // never be NULL -- call the is_main() function to check if this frame is the
  // main frame. Multiple frames may be loading at the same time. Sub-frames may
  // start or continue loading after the main frame load has ended. This
  // function may not be called for a particular frame if the load request for
  // that frame fails. For notification of overall browser load status use
  // OnLoadingStateChange instead.
  ///
//C       void (CEF_CALLBACK *on_load_start)(struct _cef_load_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame);

  ///
  // Called when the browser is done loading a frame. The |frame| value will
  // never be NULL -- call the is_main() function to check if this frame is the
  // main frame. Multiple frames may be loading at the same time. Sub-frames may
  // start or continue loading after the main frame load has ended. This
  // function will always be called for all frames irrespective of whether the
  // request completes successfully.
  ///
//C       void (CEF_CALLBACK *on_load_end)(struct _cef_load_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           int httpStatusCode);

  ///
  // Called when the resource load for a navigation fails or is canceled.
  // |errorCode| is the error code number, |errorText| is the error text and
  // |failedUrl| is the URL that failed to load. See net\base\net_error_list.h
  // for complete descriptions of the error codes.
  ///
//C       void (CEF_CALLBACK *on_load_error)(struct _cef_load_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           cef_errorcode_t errorCode, const cef_string_t* errorText,
//C           const cef_string_t* failedUrl);
//C     } cef_load_handler_t;
struct _cef_load_handler_t
{
    cef_base_t base;
    void  function(_cef_load_handler_t *self, _cef_browser_t *browser, int isLoading, int canGoBack, int canGoForward)on_loading_state_change;
    void  function(_cef_load_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame)on_load_start;
    void  function(_cef_load_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, int httpStatusCode)on_load_end;
    void  function(_cef_load_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, cef_errorcode_t errorCode, cef_string_t *errorText, cef_string_t *failedUrl)on_load_error;
}
extern (C):
alias _cef_load_handler_t cef_load_handler_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_LOAD_HANDLER_CAPI_H_

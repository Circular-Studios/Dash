/* Converted to D from ../include/capi/cef_render_process_handler_capi.h by htod */
module cef_render_process_handler_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_RENDER_PROCESS_HANDLER_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_RENDER_PROCESS_HANDLER_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;
//C     #include "include/capi/cef_browser_capi.h"
import cef_browser_capi;
//C     #include "include/capi/cef_dom_capi.h"
//C     #include "include/capi/cef_frame_capi.h"
//C     #include "include/capi/cef_load_handler_capi.h"
import cef_load_handler_capi;
//C     #include "include/capi/cef_process_message_capi.h"
//C     #include "include/capi/cef_v8_capi.h"
import cef_v8_capi;
//C     #include "include/capi/cef_values_capi.h"

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Structure used to implement render process callbacks. The functions of this
// structure will be called on the render process main thread (TID_RENDERER)
// unless otherwise indicated.
///
//C     typedef struct _cef_render_process_handler_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Called after the render process main thread has been created. |extra_info|
  // is a read-only value originating from
  // cef_browser_process_handler_t::on_render_process_thread_created(). Do not
  // keep a reference to |extra_info| outside of this function.
  ///
//C       void (CEF_CALLBACK *on_render_thread_created)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_list_value_t* extra_info);

  ///
  // Called after WebKit has been initialized.
  ///
//C       void (CEF_CALLBACK *on_web_kit_initialized)(
//C           struct _cef_render_process_handler_t* self);

  ///
  // Called after a browser has been created. When browsing cross-origin a new
  // browser will be created before the old browser with the same identifier is
  // destroyed.
  ///
//C       void (CEF_CALLBACK *on_browser_created)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser);

  ///
  // Called before a browser is destroyed.
  ///
//C       void (CEF_CALLBACK *on_browser_destroyed)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser);

  ///
  // Return the handler for browser load status events.
  ///
//C       struct _cef_load_handler_t* (CEF_CALLBACK *get_load_handler)(
//C           struct _cef_render_process_handler_t* self);

  ///
  // Called before browser navigation. Return true (1) to cancel the navigation
  // or false (0) to allow the navigation to proceed. The |request| object
  // cannot be modified in this callback.
  ///
//C       int (CEF_CALLBACK *on_before_navigation)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           struct _cef_request_t* request, cef_navigation_type_t navigation_type,
//C           int is_redirect);

  ///
  // Called immediately after the V8 context for a frame has been created. To
  // retrieve the JavaScript 'window' object use the
  // cef_v8context_t::get_global() function. V8 handles can only be accessed
  // from the thread on which they are created. A task runner for posting tasks
  // on the associated thread can be retrieved via the
  // cef_v8context_t::get_task_runner() function.
  ///
//C       void (CEF_CALLBACK *on_context_created)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           struct _cef_v8context_t* context);

  ///
  // Called immediately before the V8 context for a frame is released. No
  // references to the context should be kept after this function is called.
  ///
//C       void (CEF_CALLBACK *on_context_released)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           struct _cef_v8context_t* context);

  ///
  // Called for global uncaught exceptions in a frame. Execution of this
  // callback is disabled by default. To enable set
  // CefSettings.uncaught_exception_stack_size > 0.
  ///
//C       void (CEF_CALLBACK *on_uncaught_exception)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           struct _cef_v8context_t* context, struct _cef_v8exception_t* exception,
//C           struct _cef_v8stack_trace_t* stackTrace);

  ///
  // Called when a new node in the the browser gets focus. The |node| value may
  // be NULL if no specific node has gained focus. The node object passed to
  // this function represents a snapshot of the DOM at the time this function is
  // executed. DOM objects are only valid for the scope of this function. Do not
  // keep references to or attempt to access any DOM objects outside the scope
  // of this function.
  ///
//C       void (CEF_CALLBACK *on_focused_node_changed)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, struct _cef_frame_t* frame,
//C           struct _cef_domnode_t* node);

  ///
  // Called when a new message is received from a different process. Return true
  // (1) if the message was handled or false (0) otherwise. Do not keep a
  // reference to or attempt to access the message outside of this callback.
  ///
//C       int (CEF_CALLBACK *on_process_message_received)(
//C           struct _cef_render_process_handler_t* self,
//C           struct _cef_browser_t* browser, cef_process_id_t source_process,
//C           struct _cef_process_message_t* message);
//C     } cef_render_process_handler_t;
struct _cef_render_process_handler_t
{
    cef_base_t base;
    void  function(_cef_render_process_handler_t *self, _cef_list_value_t *extra_info)on_render_thread_created;
    void  function(_cef_render_process_handler_t *self)on_web_kit_initialized;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser)on_browser_created;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser)on_browser_destroyed;
    _cef_load_handler_t * function(_cef_render_process_handler_t *self)get_load_handler;
    int  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, _cef_request_t *request, cef_navigation_type_t navigation_type, int is_redirect)on_before_navigation;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, _cef_v8context_t *context)on_context_created;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, _cef_v8context_t *context)on_context_released;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, _cef_v8context_t *context, _cef_v8exception_t *exception, _cef_v8stack_trace_t *stackTrace)on_uncaught_exception;
    void  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, _cef_frame_t *frame, _cef_domnode_t *node)on_focused_node_changed;
    int  function(_cef_render_process_handler_t *self, _cef_browser_t *browser, cef_process_id_t source_process, _cef_process_message_t *message)on_process_message_received;
}
extern (C):
alias _cef_render_process_handler_t cef_render_process_handler_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_RENDER_PROCESS_HANDLER_CAPI_H_

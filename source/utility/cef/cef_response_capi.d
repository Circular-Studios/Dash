/* Converted to D from ../include/capi/cef_response_capi.h by htod */
module cef_response_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_RESPONSE_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_RESPONSE_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif


///
// Structure used to represent a web response. The functions of this structure
// may be called on any thread.
///
//C     typedef struct _cef_response_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if this object is read-only.
  ///
//C       int (CEF_CALLBACK *is_read_only)(struct _cef_response_t* self);

  ///
  // Get the response status code.
  ///
//C       int (CEF_CALLBACK *get_status)(struct _cef_response_t* self);

  ///
  // Set the response status code.
  ///
//C       void (CEF_CALLBACK *set_status)(struct _cef_response_t* self, int status);

  ///
  // Get the response status text.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_status_text)(
//C           struct _cef_response_t* self);

  ///
  // Set the response status text.
  ///
//C       void (CEF_CALLBACK *set_status_text)(struct _cef_response_t* self,
//C           const cef_string_t* statusText);

  ///
  // Get the response mime type.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_mime_type)(
//C           struct _cef_response_t* self);

  ///
  // Set the response mime type.
  ///
//C       void (CEF_CALLBACK *set_mime_type)(struct _cef_response_t* self,
//C           const cef_string_t* mimeType);

  ///
  // Get the value for the specified response header field.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_header)(struct _cef_response_t* self,
//C           const cef_string_t* name);

  ///
  // Get all response header fields.
  ///
//C       void (CEF_CALLBACK *get_header_map)(struct _cef_response_t* self,
//C           cef_string_multimap_t headerMap);

  ///
  // Set all response header fields.
  ///
//C       void (CEF_CALLBACK *set_header_map)(struct _cef_response_t* self,
//C           cef_string_multimap_t headerMap);
//C     } cef_response_t;
struct _cef_response_t
{
    cef_base_t base;
    int  function(_cef_response_t *self)is_read_only;
    int  function(_cef_response_t *self)get_status;
    void  function(_cef_response_t *self, int status)set_status;
    cef_string_userfree_t  function(_cef_response_t *self)get_status_text;
    void  function(_cef_response_t *self, cef_string_t *statusText)set_status_text;
    cef_string_userfree_t  function(_cef_response_t *self)get_mime_type;
    void  function(_cef_response_t *self, cef_string_t *mimeType)set_mime_type;
    cef_string_userfree_t  function(_cef_response_t *self, cef_string_t *name)get_header;
    void  function(_cef_response_t *self, cef_string_multimap_t headerMap)get_header_map;
    void  function(_cef_response_t *self, cef_string_multimap_t headerMap)set_header_map;
}
extern (C):
alias _cef_response_t cef_response_t;


///
// Create a new cef_response_t object.
///
//C     CEF_EXPORT cef_response_t* cef_response_create();
cef_response_t * cef_response_create(...);


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_RESPONSE_CAPI_H_

/* Converted to D from ../include/capi/cef_urlrequest_capi.h by htod */
module cef_urlrequest_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_URLREQUEST_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_URLREQUEST_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_auth_callback_capi.h"
import cef_auth_callback_capi;
//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;
//C     #include "include/capi/cef_request_capi.h"
import cef_request_capi;
//C     #include "include/capi/cef_response_capi.h"
import cef_response_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif

//C     struct _cef_urlrequest_client_t;

///
// Structure used to make a URL request. URL requests are not associated with a
// browser instance so no cef_client_t callbacks will be executed. URL requests
// can be created on any valid CEF thread in either the browser or render
// process. Once created the functions of the URL request object must be
// accessed on the same thread that created it.
///
//C     typedef struct _cef_urlrequest_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns the request object used to create this URL request. The returned
  // object is read-only and should not be modified.
  ///
//C       struct _cef_request_t* (CEF_CALLBACK *get_request)(
//C           struct _cef_urlrequest_t* self);

  ///
  // Returns the client.
  ///
//C       struct _cef_urlrequest_client_t* (CEF_CALLBACK *get_client)(
//C           struct _cef_urlrequest_t* self);

  ///
  // Returns the request status.
  ///
//C       cef_urlrequest_status_t (CEF_CALLBACK *get_request_status)(
//C           struct _cef_urlrequest_t* self);

  ///
  // Returns the request error if status is UR_CANCELED or UR_FAILED, or 0
  // otherwise.
  ///
//C       cef_errorcode_t (CEF_CALLBACK *get_request_error)(
//C           struct _cef_urlrequest_t* self);

  ///
  // Returns the response, or NULL if no response information is available.
  // Response information will only be available after the upload has completed.
  // The returned object is read-only and should not be modified.
  ///
//C       struct _cef_response_t* (CEF_CALLBACK *get_response)(
//C           struct _cef_urlrequest_t* self);

  ///
  // Cancel the request.
  ///
//C       void (CEF_CALLBACK *cancel)(struct _cef_urlrequest_t* self);
//C     } cef_urlrequest_t;
struct _cef_urlrequest_t
{
    cef_base_t base;
    _cef_request_t * function(_cef_urlrequest_t *self)get_request;
    _cef_urlrequest_client_t * function(_cef_urlrequest_t *self)get_client;
    cef_urlrequest_status_t  function(_cef_urlrequest_t *self)get_request_status;
    cef_errorcode_t  function(_cef_urlrequest_t *self)get_request_error;
    _cef_response_t * function(_cef_urlrequest_t *self)get_response;
    void  function(_cef_urlrequest_t *self)cancel;
}
extern (C):
alias _cef_urlrequest_t cef_urlrequest_t;


///
// Create a new URL request. Only GET, POST, HEAD, DELETE and PUT request
// functions are supported. Multiple post data elements are not supported and
// elements of type PDE_TYPE_FILE are only supported for requests originating
// from the browser process. Requests originating from the render process will
// receive the same handling as requests originating from Web content -- if the
// response contains Content-Disposition or Mime-Type header values that would
// not normally be rendered then the response may receive special handling
// inside the browser (for example, via the file download code path instead of
// the URL request code path). The |request| object will be marked as read-only
// after calling this function.
///
//C     CEF_EXPORT cef_urlrequest_t* cef_urlrequest_create(
//C         struct _cef_request_t* request, struct _cef_urlrequest_client_t* client);
cef_urlrequest_t * cef_urlrequest_create(_cef_request_t *request, _cef_urlrequest_client_t *client);


///
// Structure that should be implemented by the cef_urlrequest_t client. The
// functions of this structure will be called on the same thread that created
// the request unless otherwise documented.
///
//C     typedef struct _cef_urlrequest_client_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Notifies the client that the request has completed. Use the
  // cef_urlrequest_t::GetRequestStatus function to determine if the request was
  // successful or not.
  ///
//C       void (CEF_CALLBACK *on_request_complete)(
//C           struct _cef_urlrequest_client_t* self,
//C           struct _cef_urlrequest_t* request);

  ///
  // Notifies the client of upload progress. |current| denotes the number of
  // bytes sent so far and |total| is the total size of uploading data (or -1 if
  // chunked upload is enabled). This function will only be called if the
  // UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.
  ///
//C       void (CEF_CALLBACK *on_upload_progress)(struct _cef_urlrequest_client_t* self,
//C           struct _cef_urlrequest_t* request, uint64 current, uint64 total);

  ///
  // Notifies the client of download progress. |current| denotes the number of
  // bytes received up to the call and |total| is the expected total size of the
  // response (or -1 if not determined).
  ///
//C       void (CEF_CALLBACK *on_download_progress)(
//C           struct _cef_urlrequest_client_t* self, struct _cef_urlrequest_t* request,
//C           uint64 current, uint64 total);

  ///
  // Called when some part of the response is read. |data| contains the current
  // bytes received since the last call. This function will not be called if the
  // UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.
  ///
//C       void (CEF_CALLBACK *on_download_data)(struct _cef_urlrequest_client_t* self,
//C           struct _cef_urlrequest_t* request, const void* data,
//C           size_t data_length);

  ///
  // Called on the IO thread when the browser needs credentials from the user.
  // |isProxy| indicates whether the host is a proxy server. |host| contains the
  // hostname and |port| contains the port number. Return true (1) to continue
  // the request and call cef_auth_callback_t::cont() when the authentication
  // information is available. Return false (0) to cancel the request. This
  // function will only be called for requests initiated from the browser
  // process.
  ///
//C       int (CEF_CALLBACK *get_auth_credentials)(
//C           struct _cef_urlrequest_client_t* self, int isProxy,
//C           const cef_string_t* host, int port, const cef_string_t* realm,
//C           const cef_string_t* scheme, struct _cef_auth_callback_t* callback);
//C     } cef_urlrequest_client_t;
struct _cef_urlrequest_client_t
{
    cef_base_t base;
    void  function(_cef_urlrequest_client_t *self, _cef_urlrequest_t *request)on_request_complete;
    void  function(_cef_urlrequest_client_t *self, _cef_urlrequest_t *request, uint64 current, uint64 total)on_upload_progress;
    void  function(_cef_urlrequest_client_t *self, _cef_urlrequest_t *request, uint64 current, uint64 total)on_download_progress;
    void  function(_cef_urlrequest_client_t *self, _cef_urlrequest_t *request, void *data, size_t data_length)on_download_data;
    int  function(_cef_urlrequest_client_t *self, int isProxy, cef_string_t *host, int port, cef_string_t *realm, cef_string_t *scheme, _cef_auth_callback_t *callback)get_auth_credentials;
}
alias _cef_urlrequest_client_t cef_urlrequest_client_t;


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_URLREQUEST_CAPI_H_

/* Converted to D from ../include/capi/cef_values_capi.h by htod */
module cef_values_capi;
// Copyright (c) 2014 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

//C     #ifndef CEF_INCLUDE_CAPI_CEF_VALUES_CAPI_H_
//C     #define CEF_INCLUDE_CAPI_CEF_VALUES_CAPI_H_
//C     #pragma once

//C     #include "include/capi/cef_base_capi.h"
import cef_base_capi;

//C     #ifdef __cplusplus
//C     extern "C" {
//C     #endif

//C     struct _cef_dictionary_value_t;
//C     struct _cef_list_value_t;

///
// Structure representing a binary value. Can be used on any process and thread.
///
//C     typedef struct _cef_binary_value_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if this object is valid. Do not call any other functions
  // if this function returns false (0).
  ///
//C       int (CEF_CALLBACK *is_valid)(struct _cef_binary_value_t* self);

  ///
  // Returns true (1) if this object is currently owned by another object.
  ///
//C       int (CEF_CALLBACK *is_owned)(struct _cef_binary_value_t* self);

  ///
  // Returns a copy of this object. The data in this object will also be copied.
  ///
//C       struct _cef_binary_value_t* (CEF_CALLBACK *copy)(
//C           struct _cef_binary_value_t* self);

  ///
  // Returns the data size.
  ///
//C       size_t (CEF_CALLBACK *get_size)(struct _cef_binary_value_t* self);

  ///
  // Read up to |buffer_size| number of bytes into |buffer|. Reading begins at
  // the specified byte |data_offset|. Returns the number of bytes read.
  ///
//C       size_t (CEF_CALLBACK *get_data)(struct _cef_binary_value_t* self,
//C           void* buffer, size_t buffer_size, size_t data_offset);
//C     } cef_binary_value_t;
struct _cef_binary_value_t
{
    cef_base_t base;
    int  function(_cef_binary_value_t *self)is_valid;
    int  function(_cef_binary_value_t *self)is_owned;
    _cef_binary_value_t * function(_cef_binary_value_t *self)copy;
    size_t  function(_cef_binary_value_t *self)get_size;
    size_t  function(_cef_binary_value_t *self, void *buffer, size_t buffer_size, size_t data_offset)get_data;
}
extern (C):
alias _cef_binary_value_t cef_binary_value_t;


///
// Creates a new object that is not owned by any other object. The specified
// |data| will be copied.
///
//C     CEF_EXPORT cef_binary_value_t* cef_binary_value_create(const void* data,
//C         size_t data_size);
cef_binary_value_t * cef_binary_value_create(void *data, size_t data_size);


///
// Structure representing a dictionary value. Can be used on any process and
// thread.
///
//C     typedef struct _cef_dictionary_value_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if this object is valid. Do not call any other functions
  // if this function returns false (0).
  ///
//C       int (CEF_CALLBACK *is_valid)(struct _cef_dictionary_value_t* self);

  ///
  // Returns true (1) if this object is currently owned by another object.
  ///
//C       int (CEF_CALLBACK *is_owned)(struct _cef_dictionary_value_t* self);

  ///
  // Returns true (1) if the values of this object are read-only. Some APIs may
  // expose read-only objects.
  ///
//C       int (CEF_CALLBACK *is_read_only)(struct _cef_dictionary_value_t* self);

  ///
  // Returns a writable copy of this object. If |exclude_NULL_children| is true
  // (1) any NULL dictionaries or lists will be excluded from the copy.
  ///
//C       struct _cef_dictionary_value_t* (CEF_CALLBACK *copy)(
//C           struct _cef_dictionary_value_t* self, int exclude_empty_children);

  ///
  // Returns the number of values.
  ///
//C       size_t (CEF_CALLBACK *get_size)(struct _cef_dictionary_value_t* self);

  ///
  // Removes all values. Returns true (1) on success.
  ///
//C       int (CEF_CALLBACK *clear)(struct _cef_dictionary_value_t* self);

  ///
  // Returns true (1) if the current dictionary has a value for the given key.
  ///
//C       int (CEF_CALLBACK *has_key)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Reads all keys for this dictionary into the specified vector.
  ///
//C       int (CEF_CALLBACK *get_keys)(struct _cef_dictionary_value_t* self,
//C           cef_string_list_t keys);

  ///
  // Removes the value at the specified key. Returns true (1) is the value was
  // removed successfully.
  ///
//C       int (CEF_CALLBACK *remove)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Returns the value type for the specified key.
  ///
//C       cef_value_type_t (CEF_CALLBACK *get_type)(
//C           struct _cef_dictionary_value_t* self, const cef_string_t* key);

  ///
  // Returns the value at the specified key as type bool.
  ///
//C       int (CEF_CALLBACK *get_bool)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Returns the value at the specified key as type int.
  ///
//C       int (CEF_CALLBACK *get_int)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Returns the value at the specified key as type double.
  ///
//C       double (CEF_CALLBACK *get_double)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Returns the value at the specified key as type string.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_string)(
//C           struct _cef_dictionary_value_t* self, const cef_string_t* key);

  ///
  // Returns the value at the specified key as type binary.
  ///
//C       struct _cef_binary_value_t* (CEF_CALLBACK *get_binary)(
//C           struct _cef_dictionary_value_t* self, const cef_string_t* key);

  ///
  // Returns the value at the specified key as type dictionary.
  ///
//C       struct _cef_dictionary_value_t* (CEF_CALLBACK *get_dictionary)(
//C           struct _cef_dictionary_value_t* self, const cef_string_t* key);

  ///
  // Returns the value at the specified key as type list.
  ///
//C       struct _cef_list_value_t* (CEF_CALLBACK *get_list)(
//C           struct _cef_dictionary_value_t* self, const cef_string_t* key);

  ///
  // Sets the value at the specified key as type null. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_null)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key);

  ///
  // Sets the value at the specified key as type bool. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_bool)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, int value);

  ///
  // Sets the value at the specified key as type int. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_int)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, int value);

  ///
  // Sets the value at the specified key as type double. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_double)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, double value);

  ///
  // Sets the value at the specified key as type string. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_string)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, const cef_string_t* value);

  ///
  // Sets the value at the specified key as type binary. Returns true (1) if the
  // value was set successfully. If |value| is currently owned by another object
  // then the value will be copied and the |value| reference will not change.
  // Otherwise, ownership will be transferred to this object and the |value|
  // reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_binary)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, struct _cef_binary_value_t* value);

  ///
  // Sets the value at the specified key as type dict. Returns true (1) if the
  // value was set successfully. After calling this function the |value| object
  // will no longer be valid. If |value| is currently owned by another object
  // then the value will be copied and the |value| reference will not change.
  // Otherwise, ownership will be transferred to this object and the |value|
  // reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_dictionary)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, struct _cef_dictionary_value_t* value);

  ///
  // Sets the value at the specified key as type list. Returns true (1) if the
  // value was set successfully. After calling this function the |value| object
  // will no longer be valid. If |value| is currently owned by another object
  // then the value will be copied and the |value| reference will not change.
  // Otherwise, ownership will be transferred to this object and the |value|
  // reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_list)(struct _cef_dictionary_value_t* self,
//C           const cef_string_t* key, struct _cef_list_value_t* value);
//C     } cef_dictionary_value_t;
struct _cef_dictionary_value_t
{
    cef_base_t base;
    int  function(_cef_dictionary_value_t *self)is_valid;
    int  function(_cef_dictionary_value_t *self)is_owned;
    int  function(_cef_dictionary_value_t *self)is_read_only;
    _cef_dictionary_value_t * function(_cef_dictionary_value_t *self, int exclude_empty_children)copy;
    size_t  function(_cef_dictionary_value_t *self)get_size;
    int  function(_cef_dictionary_value_t *self)clear;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key)has_key;
    int  function(_cef_dictionary_value_t *self, cef_string_list_t keys)get_keys;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key)remove;
    cef_value_type_t  function(_cef_dictionary_value_t *self, cef_string_t *key)get_type;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key)get_bool;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key)get_int;
    double  function(_cef_dictionary_value_t *self, cef_string_t *key)get_double;
    cef_string_userfree_t  function(_cef_dictionary_value_t *self, cef_string_t *key)get_string;
    _cef_binary_value_t * function(_cef_dictionary_value_t *self, cef_string_t *key)get_binary;
    _cef_dictionary_value_t * function(_cef_dictionary_value_t *self, cef_string_t *key)get_dictionary;
    _cef_list_value_t * function(_cef_dictionary_value_t *self, cef_string_t *key)get_list;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key)set_null;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, int value)set_bool;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, int value)set_int;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, double value)set_double;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, cef_string_t *value)set_string;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, _cef_binary_value_t *value)set_binary;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, _cef_dictionary_value_t *value)set_dictionary;
    int  function(_cef_dictionary_value_t *self, cef_string_t *key, _cef_list_value_t *value)set_list;
}
alias _cef_dictionary_value_t cef_dictionary_value_t;


///
// Creates a new object that is not owned by any other object.
///
//C     CEF_EXPORT cef_dictionary_value_t* cef_dictionary_value_create();
cef_dictionary_value_t * cef_dictionary_value_create(...);


///
// Structure representing a list value. Can be used on any process and thread.
///
//C     typedef struct _cef_list_value_t {
  ///
  // Base structure.
  ///
//C       cef_base_t base;

  ///
  // Returns true (1) if this object is valid. Do not call any other functions
  // if this function returns false (0).
  ///
//C       int (CEF_CALLBACK *is_valid)(struct _cef_list_value_t* self);

  ///
  // Returns true (1) if this object is currently owned by another object.
  ///
//C       int (CEF_CALLBACK *is_owned)(struct _cef_list_value_t* self);

  ///
  // Returns true (1) if the values of this object are read-only. Some APIs may
  // expose read-only objects.
  ///
//C       int (CEF_CALLBACK *is_read_only)(struct _cef_list_value_t* self);

  ///
  // Returns a writable copy of this object.
  ///
//C       struct _cef_list_value_t* (CEF_CALLBACK *copy)(
//C           struct _cef_list_value_t* self);

  ///
  // Sets the number of values. If the number of values is expanded all new
  // value slots will default to type null. Returns true (1) on success.
  ///
//C       int (CEF_CALLBACK *set_size)(struct _cef_list_value_t* self, size_t size);

  ///
  // Returns the number of values.
  ///
//C       size_t (CEF_CALLBACK *get_size)(struct _cef_list_value_t* self);

  ///
  // Removes all values. Returns true (1) on success.
  ///
//C       int (CEF_CALLBACK *clear)(struct _cef_list_value_t* self);

  ///
  // Removes the value at the specified index.
  ///
//C       int (CEF_CALLBACK *remove)(struct _cef_list_value_t* self, int index);

  ///
  // Returns the value type at the specified index.
  ///
//C       cef_value_type_t (CEF_CALLBACK *get_type)(struct _cef_list_value_t* self,
//C           int index);

  ///
  // Returns the value at the specified index as type bool.
  ///
//C       int (CEF_CALLBACK *get_bool)(struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type int.
  ///
//C       int (CEF_CALLBACK *get_int)(struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type double.
  ///
//C       double (CEF_CALLBACK *get_double)(struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type string.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
//C       cef_string_userfree_t (CEF_CALLBACK *get_string)(
//C           struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type binary.
  ///
//C       struct _cef_binary_value_t* (CEF_CALLBACK *get_binary)(
//C           struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type dictionary.
  ///
//C       struct _cef_dictionary_value_t* (CEF_CALLBACK *get_dictionary)(
//C           struct _cef_list_value_t* self, int index);

  ///
  // Returns the value at the specified index as type list.
  ///
//C       struct _cef_list_value_t* (CEF_CALLBACK *get_list)(
//C           struct _cef_list_value_t* self, int index);

  ///
  // Sets the value at the specified index as type null. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_null)(struct _cef_list_value_t* self, int index);

  ///
  // Sets the value at the specified index as type bool. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_bool)(struct _cef_list_value_t* self, int index,
//C           int value);

  ///
  // Sets the value at the specified index as type int. Returns true (1) if the
  // value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_int)(struct _cef_list_value_t* self, int index,
//C           int value);

  ///
  // Sets the value at the specified index as type double. Returns true (1) if
  // the value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_double)(struct _cef_list_value_t* self, int index,
//C           double value);

  ///
  // Sets the value at the specified index as type string. Returns true (1) if
  // the value was set successfully.
  ///
//C       int (CEF_CALLBACK *set_string)(struct _cef_list_value_t* self, int index,
//C           const cef_string_t* value);

  ///
  // Sets the value at the specified index as type binary. Returns true (1) if
  // the value was set successfully. After calling this function the |value|
  // object will no longer be valid. If |value| is currently owned by another
  // object then the value will be copied and the |value| reference will not
  // change. Otherwise, ownership will be transferred to this object and the
  // |value| reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_binary)(struct _cef_list_value_t* self, int index,
//C           struct _cef_binary_value_t* value);

  ///
  // Sets the value at the specified index as type dict. Returns true (1) if the
  // value was set successfully. After calling this function the |value| object
  // will no longer be valid. If |value| is currently owned by another object
  // then the value will be copied and the |value| reference will not change.
  // Otherwise, ownership will be transferred to this object and the |value|
  // reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_dictionary)(struct _cef_list_value_t* self, int index,
//C           struct _cef_dictionary_value_t* value);

  ///
  // Sets the value at the specified index as type list. Returns true (1) if the
  // value was set successfully. After calling this function the |value| object
  // will no longer be valid. If |value| is currently owned by another object
  // then the value will be copied and the |value| reference will not change.
  // Otherwise, ownership will be transferred to this object and the |value|
  // reference will be invalidated.
  ///
//C       int (CEF_CALLBACK *set_list)(struct _cef_list_value_t* self, int index,
//C           struct _cef_list_value_t* value);
//C     } cef_list_value_t;
struct _cef_list_value_t
{
    cef_base_t base;
    int  function(_cef_list_value_t *self)is_valid;
    int  function(_cef_list_value_t *self)is_owned;
    int  function(_cef_list_value_t *self)is_read_only;
    _cef_list_value_t * function(_cef_list_value_t *self)copy;
    int  function(_cef_list_value_t *self, size_t size)set_size;
    size_t  function(_cef_list_value_t *self)get_size;
    int  function(_cef_list_value_t *self)clear;
    int  function(_cef_list_value_t *self, int index)remove;
    cef_value_type_t  function(_cef_list_value_t *self, int index)get_type;
    int  function(_cef_list_value_t *self, int index)get_bool;
    int  function(_cef_list_value_t *self, int index)get_int;
    double  function(_cef_list_value_t *self, int index)get_double;
    cef_string_userfree_t  function(_cef_list_value_t *self, int index)get_string;
    _cef_binary_value_t * function(_cef_list_value_t *self, int index)get_binary;
    _cef_dictionary_value_t * function(_cef_list_value_t *self, int index)get_dictionary;
    _cef_list_value_t * function(_cef_list_value_t *self, int index)get_list;
    int  function(_cef_list_value_t *self, int index)set_null;
    int  function(_cef_list_value_t *self, int index, int value)set_bool;
    int  function(_cef_list_value_t *self, int index, int value)set_int;
    int  function(_cef_list_value_t *self, int index, double value)set_double;
    int  function(_cef_list_value_t *self, int index, cef_string_t *value)set_string;
    int  function(_cef_list_value_t *self, int index, _cef_binary_value_t *value)set_binary;
    int  function(_cef_list_value_t *self, int index, _cef_dictionary_value_t *value)set_dictionary;
    int  function(_cef_list_value_t *self, int index, _cef_list_value_t *value)set_list;
}
alias _cef_list_value_t cef_list_value_t;


///
// Creates a new object that is not owned by any other object.
///
//C     CEF_EXPORT cef_list_value_t* cef_list_value_create();
cef_list_value_t * cef_list_value_create(...);


//C     #ifdef __cplusplus
//C     }
//C     #endif

//C     #endif  // CEF_INCLUDE_CAPI_CEF_VALUES_CAPI_H_

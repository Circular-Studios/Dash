module deimos.cef1.rame;

// Copyright (c) 2012 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

// #ifndef CEF_INCLUDE_CAPI_CEF_FRAME_CAPI_H_
// #pragma once

// #ifdef __cplusplus
extern(C) {
// #endif

import deimos.cef1.base;


///
// Structure used to represent a frame in the browser window. The functions of
// this structure may be called on any thread unless otherwise indicated in the
// comments.
///
struct cef_frame_t {
  ///
  // Base structure.
  ///
  cef_base_t base;

  ///
  // Execute undo in this frame.
  ///
  extern(System) void function(cef_frame_t* self) undo;

  ///
  // Execute redo in this frame.
  ///
  extern(System) void function(cef_frame_t* self) redo;

  ///
  // Execute cut in this frame.
  ///
  extern(System) void function(cef_frame_t* self) cut;

  ///
  // Execute copy in this frame.
  ///
  extern(System) void function(cef_frame_t* self) copy;

  ///
  // Execute paste in this frame.
  ///
  extern(System) void function(cef_frame_t* self) paste;

  ///
  // Execute delete in this frame.
  ///
  extern(System) void function(cef_frame_t* self) del;

  ///
  // Execute select all in this frame.
  ///
  extern(System) void function(cef_frame_t* self) select_all;

  ///
  // Execute printing in the this frame.  The user will be prompted with the
  // print dialog appropriate to the operating system.
  ///
  extern(System) void function(cef_frame_t* self) print;

  ///
  // Save this frame's HTML source to a temporary file and open it in the
  // default text viewing application.
  ///
  extern(System) void function(cef_frame_t* self) view_source;

  ///
  // Returns this frame's HTML source as a string. This function should only be
  // called on the UI thread.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
  extern(System) cef_string_userfree_t function(cef_frame_t* self) get_source;

  ///
  // Returns this frame's display text as a string. This function should only be
  // called on the UI thread.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
  extern(System) cef_string_userfree_t function(cef_frame_t* self) get_text;

  ///
  // Load the request represented by the |request| object.
  ///
  extern(System) void function(cef_frame_t* self, cef_request_t* request) load_request;

  ///
  // Load the specified |url|.
  ///
  extern(System) void function(cef_frame_t* self, const(cef_string_t)* url) load_url;

  ///
  // Load the contents of |string_val| with the optional dummy target |url|.
  ///
  extern(System) void function(cef_frame_t* self, const(cef_string_t)* string_val, const(cef_string_t)* url) load_string;

  ///
  // Load the contents of |stream| with the optional dummy target |url|.
  ///
  extern(System) void function(cef_frame_t* self, cef_stream_reader_t* stream, const(cef_string_t)* url) load_stream;

  ///
  // Execute a string of JavaScript code in this frame. The |script_url|
  // parameter is the URL where the script in question can be found, if any. The
  // renderer may request this URL to show the developer the source of the
  // error.  The |start_line| parameter is the base line number to use for error
  // reporting.
  ///
  extern(System) void function(cef_frame_t* self, const(cef_string_t)* jsCode, const(cef_string_t)* scriptUrl, int startLine) execute_java_script;

  ///
  // Returns true (1) if this is the main (top-level) frame.
  ///
  extern(System) int function(cef_frame_t* self) is_main;

  ///
  // Returns true (1) if this is the focused frame. This function should only be
  // called on the UI thread.
  ///
  extern(System) int function(cef_frame_t* self) is_focused;

  ///
  // Returns the name for this frame. If the frame has an assigned name (for
  // example, set via the iframe "name" attribute) then that value will be
  // returned. Otherwise a unique name will be constructed based on the frame
  // parent hierarchy. The main (top-level) frame will always have an NULL name
  // value.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
  extern(System) cef_string_userfree_t function(cef_frame_t* self) get_name;

  ///
  // Returns the globally unique identifier for this frame.
  ///
  extern(System) int64 function(cef_frame_t* self) get_identifier;

  ///
  // Returns the parent of this frame or NULL if this is the main (top-level)
  // frame. This function should only be called on the UI thread.
  ///
  extern(System) cef_frame_t* function(cef_frame_t* self) get_parent;

  ///
  // Returns the URL currently loaded in this frame.
  ///
  // The resulting string must be freed by calling cef_string_userfree_free().
  extern(System) cef_string_userfree_t function(cef_frame_t* self) get_url;

  ///
  // Returns the browser that this frame belongs to.
  ///
  extern(System) cef_browser_t* function(cef_frame_t* self) get_browser;

  ///
  // Visit the DOM document.
  ///
  extern(System) void function(cef_frame_t* self, cef_domvisitor_t* visitor) visit_dom;

  ///
  // Get the V8 context associated with the frame. This function should only be
  // called on the UI thread.
  ///
  extern(System) cef_v8context_t* function(cef_frame_t* self) get_v8context;
}


// #ifdef __cplusplus
}
// #endif

// #endif CEF_INCLUDE_CAPI_CEF_FRAME_CAPI_H_

module deimos.cef3.request;

// Copyright (c) 2012 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

extern(C) {

import deimos.cef3.base;


///
// Structure used to represent a web request. The functions of this structure
// may be called on any thread.
///
struct cef_request_t {
    ///
    // Base structure.
    ///
    cef_base_t base;

    ///
    // Returns true (1) if this object is read-only.
    ///
    extern(System) int function(cef_request_t* self) is_read_only;

    ///
    // Get the fully qualified URL.
    ///
    // The resulting string must be freed by calling cef_string_userfree_free().
    extern(System) cef_string_userfree_t function(cef_request_t* self) get_url;

    ///
    // Set the fully qualified URL.
    ///
    extern(System) void function(cef_request_t* self, const(cef_string_t)* url) set_url;

    ///
    // Get the request function type. The value will default to POST if post data
    // is provided and GET otherwise.
    ///
    // The resulting string must be freed by calling cef_string_userfree_free().
    extern(System) cef_string_userfree_t function(cef_request_t* self) get_method;

    ///
    // Set the request function type.
    ///
    extern(System) void function(cef_request_t* self, const(cef_string_t)* method) set_method;

    ///
    // Get the post data.
    ///
    extern(System) cef_post_data_t* function(cef_request_t* self) get_post_data;

    ///
    // Set the post data.
    ///
    extern(System) void function(cef_request_t* self, cef_post_data_t* postData) set_post_data;

    ///
    // Get the header values.
    ///
    extern(System) void function(cef_request_t* self, cef_string_multimap_t headerMap) get_header_map;

    ///
    // Set the header values.
    ///
    extern(System) void function(cef_request_t* self, cef_string_multimap_t headerMap) set_header_map;

    ///
    // Set all values at one time.
    ///
    extern(System) void function(cef_request_t* self, const(cef_string_t)* url, const(cef_string_t)* method, cef_post_data_t* postData, cef_string_multimap_t headerMap) set;

    ///
    // Get the flags used in combination with cef_urlrequest_t. See
    // cef_urlrequest_flags_t for supported values.
    ///
    extern(System) int function(cef_request_t* self) get_flags;

    ///
    // Set the flags used in combination with cef_urlrequest_t.  See
    // cef_urlrequest_flags_t for supported values.
    ///
    extern(System) void function(cef_request_t* self, int flags) set_flags;

    ///
    // Set the URL to the first party for cookies used in combination with
    // cef_urlrequest_t.
    ///
    // The resulting string must be freed by calling cef_string_userfree_free().
    extern(System) cef_string_userfree_t function(cef_request_t* self) get_first_party_for_cookies;

    ///
    // Get the URL to the first party for cookies used in combination with
    // cef_urlrequest_t.
    ///
    extern(System) void function(cef_request_t* self, const(cef_string_t)* url) set_first_party_for_cookies;

    ///
    // Get the resource type for this request. Accurate resource type information
    // may only be available in the browser process.
    ///
    extern(System) cef_resource_type_t function(cef_request_t *self) get_resource_type;

    ///
    // Get the transition type for this request. Only available in the browser
    // process and only applies to requests that represent a main frame or sub-
    // frame navigation.
    ///
    extern(System) cef_transition_type_t function(cef_request_t *self) get_transition_type;
}


///
// Create a new cef_request_t object.
///
cef_request_t* cef_request_create();


///
// Structure used to represent post data for a web request. The functions of
// this structure may be called on any thread.
///
struct cef_post_data_t {
    ///
    // Base structure.
    ///
    cef_base_t base;

    ///
    // Returns true (1) if this object is read-only.
    ///
    extern(System) int function(cef_post_data_t* self) is_read_only;

    ///
    // Returns the number of existing post data elements.
    ///
    extern(System) size_t function(cef_post_data_t* self) get_element_count;

    ///
    // Retrieve the post data elements.
    ///
    extern(System) void function(cef_post_data_t* self, size_t* elementsCount, cef_post_data_element_t** elements) get_elements;

    ///
    // Remove the specified post data element.  Returns true (1) if the removal
    // succeeds.
    ///
    extern(System) int function(cef_post_data_t* self, cef_post_data_element_t* element) remove_element;

    ///
    // Add the specified post data element.  Returns true (1) if the add succeeds.
    ///
    extern(System) int function(cef_post_data_t* self, cef_post_data_element_t* element) add_element;

    ///
    // Remove all existing post data elements.
    ///
    extern(System) void function(cef_post_data_t* self) remove_elements;
}


///
// Create a new cef_post_data_t object.
///
cef_post_data_t* cef_post_data_create();


///
// Structure used to represent a single element in the request post data. The
// functions of this structure may be called on any thread.
///
struct cef_post_data_element_t {
    ///
    // Base structure.
    ///
    cef_base_t base;

    ///
    // Returns true (1) if this object is read-only.
    ///
    extern(System) int function(cef_post_data_element_t* self) is_read_only;

    ///
    // Remove all contents from the post data element.
    ///
    extern(System) void function(cef_post_data_element_t* self) set_to_empty;

    ///
    // The post data element will represent a file.
    ///
    extern(System) void function(cef_post_data_element_t* self, const(cef_string_t)* fileName) set_to_file;

    ///
    // The post data element will represent bytes.  The bytes passed in will be
    // copied.
    ///
    extern(System) void function(cef_post_data_element_t* self, size_t size, const(void)* bytes) set_to_bytes;

    ///
    // Return the type of this post data element.
    ///
    extern(System)  cef_postdataelement_type_t function(cef_post_data_element_t* self) get_type;

    ///
    // Return the file name.
    ///
    // The resulting string must be freed by calling cef_string_userfree_free().
    extern(System) cef_string_userfree_t function(cef_post_data_element_t* self) get_file;

    ///
    // Return the number of bytes.
    ///
    extern(System) size_t function(cef_post_data_element_t* self) get_bytes_count;

    ///
    // Read up to |size| bytes into |bytes| and return the number of bytes
    // actually read.
    ///
    extern(System) size_t function(cef_post_data_element_t* self, size_t size, void* bytes) get_bytes;
}


///
// Create a new cef_post_data_element_t object.
///
cef_post_data_element_t* cef_post_data_element_create();


}